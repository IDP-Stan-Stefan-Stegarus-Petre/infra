services:
  postgres:
    restart: unless-stopped
    image: postgres:13.2-alpine
    environment:
      POSTGRES_USER: mobylab-app
      POSTGRES_DB: mobylab-app
      POSTGRES_PASSWORD: mobylab-app
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - db-read-write-service-postgres-network
    deploy:
      placement:
        constraints: [node.role == manager]

  db-read-write-service:
    restart: unless-stopped
    image: ghcr.io/idp-stan-stefan-stegarus-petre/db-read-write-service:latest
    build:
      context: ../db-read-write-service
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      - postgres
    networks:
      - db-read-write-service-postgres-network
      - kong-network

  auth-service:
    restart: unless-stopped
    image: ghcr.io/idp-stan-stefan-stegarus-petre/auth-service:latest
    build:
      context: ../auth-service
      dockerfile: Dockerfile
    ports:
      - "5001:80"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      - db-read-write-service
    networks:
      - kong-network

  business-logic-service:
    restart: unless-stopped
    image: ghcr.io/idp-stan-stefan-stegarus-petre/business-logic-service:latest
    build:
      context: ../business-logic-service
      dockerfile: Dockerfile
    ports:
      - "5002:80"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      - db-read-write-service
    networks:
      - kong-network

  kong:
    restart: unless-stopped
    image: ghcr.io/idp-stan-stefan-stegarus-petre/idp-kong:latest
    build:
      context: ./kong
      dockerfile: Dockerfile
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      # - 8000:8000
      - 8001:8001
      - 8002:8002
      # - 8443:8443
    networks:
      - kong-network
      - kong-prometheus-network
    deploy:
      placement:
        constraints: [node.role == manager]

  grafana:
    user: "0"
    restart: unless-stopped
    image: ghcr.io/idp-stan-stefan-stegarus-petre/idp-grafana:latest
    build:
      context: ./grafana
      dockerfile: Dockerfile
    environment:
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - 3001:3000
    networks:
      - grafana-prometheus-network
    deploy:
      placement:
        constraints: [node.role == manager]

  prometheus:
    restart: unless-stopped
    image: ghcr.io/idp-stan-stefan-stegarus-petre/idp-prometheus:latest
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    ports:
      - 9090:9090
    networks:
      - grafana-prometheus-network
      - kong-prometheus-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  agent:
    image: portainer/agent:2.20.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent-network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:2.20.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer-data:/data
    networks:
      - agent-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  postgres:
  grafana-data:
  portainer-data:

networks:
  agent-network:
    driver: overlay
  db-read-write-service-postgres-network:
    driver: overlay
  kong-network:
    driver: overlay
  grafana-prometheus-network:
    driver: overlay
  kong-prometheus-network:
    driver: overlay
