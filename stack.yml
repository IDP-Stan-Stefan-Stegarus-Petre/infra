services:
  postgres:
    container_name: postgres
    restart: unless-stopped
    image: postgres:13.2-alpine
    environment:
      POSTGRES_USER: idp
      POSTGRES_DB: idp
      POSTGRES_PASSWORD: idp
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - backend-postgres-network
    deploy:
      placement:
        constraints: [node.role == manager]

  backend:
    container_name: backend
    restart: unless-stopped
    image: backend
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      - postgres
    volumes:
      - backend-static-files:/static-files/api/media/
    networks:
      - backend-postgres-network
      - backend-kong-network
    deploy:
      placement:
        constraints: [node.role == manager]

  kong:
    container_name: kong
    restart: unless-stopped
    image: kong:latest
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      # - 8000:8000
      - 8001:8001
      - 8002:8002
      # - 8443:8443
    networks:
      - backend-kong-network
    deploy:
      placement:
        constraints: [node.role == manager]

  grafana:
    user: "0"
    container_name: grafana
    restart: unless-stopped
    image: grafana
    build:
      context: ./grafana
      dockerfile: Dockerfile
    environment:
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana-data:/var/lib/grafana
    ports:
      - 3001:3000
    networks:
      - grafana-prometheus-network

  prometheus:
    container_name: prometheus
    restart: unless-stopped
    image: prom/prometheus
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - grafana-prometheus-network
      - kong-prometheus-network

volumes:
  postgres:
  backend-static-files:

networks:
  backend-postgres-network:
    driver: overlay
  backend-kong-network:
    driver: overlay
  grafana-prometheus-network:
    driver: overlay
  kong-prometheus-network:
    driver: overlay
